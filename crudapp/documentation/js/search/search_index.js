var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.83,1,1.881]],["body/modules/AppModule.html",[0,0.961,1,3.637,2,0.883,3,1.287,4,1.973,5,1.973,6,1.973,7,2.792,8,0.038,9,2.505,10,2.792,11,2.792,12,2.792,13,1.683,14,1.569,15,1.076,16,0.973,17,0.255,18,0.255,19,0.216,20,2.39,21,0.596,22,3.486,23,2.177,24,1.938,25,3.486,26,3.97,27,3.486,28,1.739,29,2.477,30,0.801,31,2.39,32,3.486,33,4.523,34,0.483,35,2.39,36,3.486,37,3.486,38,0.727,39,0.727,40,0.432,41,0.659,42,2.39,43,0.801,44,1.973,45,0.587,46,2.39,47,3.486,48,0.384,49,2.39,50,1.192,51,2.39,52,1.493,53,2.39,54,2.39,55,2.39,56,2.39,57,1.329,58,1.329,59,2.39,60,3.486,61,1.698,62,1.698,63,1.493,64,2.477,65,2.39,66,3.486,67,2.877,68,2.39,69,2.39,70,1.698,71,2.39,72,1.698,73,2.39,74,1.973,75,2.39,76,0.255,77,0.045,78,1.973,79,2.39,80,0.021,81,0.021]],["title/controllers/AuthController.html",[82,1.227,83,1.881]],["body/controllers/AuthController.html",[8,0.038,17,0.24,18,0.24,19,0.203,21,0.561,30,1.117,34,0.948,38,1.426,39,1.426,40,0.848,41,1.293,43,1.572,45,0.423,48,0.361,76,0.24,77,0.042,80,0.021,81,0.021,82,1.618,83,2.083,84,1.013,85,1.857,86,1.599,87,1.405,88,3.335,89,2.753,90,3.335,91,3.335,92,4.394,93,3.335,94,2.753,95,3.335,96,2.753,97,2.443,98,0.455,99,3.335,100,3.335,101,3.335,102,3.973,103,2.25,104,2.401,105,2.112,106,3.335,107,2.25,108,2.351,109,4.312,110,2.25,111,1.978,112,3.335,113,2.25,114,2.609,115,2.25,116,1.79,117,3.335,118,2.25,119,2.25,120,3.335,121,2.25,122,3.335,123,2.753,124,3.335,125,2.25,126,1.982,127,3.335,128,2.25,129,1.599,130,1.405,131,1.982,132,1.857,133,2.25,134,1.123,135,2.25,136,2.112,137,2.25,138,2.25,139,2.25,140,2.25,141,2.25,142,2.25,143,2.25,144,2.25,145,2.25,146,2.25]],["title/classes/AuthLogin.html",[77,0.057,111,1.356]],["body/classes/AuthLogin.html",[8,0.038,17,0.362,18,0.362,19,0.306,34,0.898,40,0.803,45,0.362,76,0.528,77,0.099,80,0.027,81,0.027,98,0.686,104,2.606,105,2.001,108,2.367,111,2.231,116,1.383,147,1.888,148,2.121,149,2.218,150,2.625,151,2.802,152,3.395,153,2.412,154,3.395,155,3.522,156,3.285,157,3.285,158,3.41,159,1.888,160,1.888,161,1.254,162,1.888,163,2.777,164,1.528]],["title/modules/AuthModule.html",[0,0.83,7,1.675]],["body/modules/AuthModule.html",[0,1.543,2,1.699,3,1.487,7,3.197,8,0.038,9,2.678,14,1.812,15,1.318,16,1.193,17,0.312,18,0.312,19,0.264,21,0.73,28,2.296,29,2.861,45,0.586,48,0.47,76,0.312,77,0.055,80,0.025,81,0.025,83,2.874,84,2.23,131,2.678,132,2.418,165,2.418,166,2.929,167,2.418,168,3.057,169,2.929,170,4.026,171,4.026,172,4.026,173,2.009,174,4.026,175,4.026,176,2.929,177,2.929,178,2.418,179,2.929,180,2.929,181,2.418,182,2.929,183,2.929,184,2.929,185,2.929,186,2.929,187,2.081]],["title/injectables/AuthService.html",[131,1.503,188,0.609]],["body/injectables/AuthService.html",[8,0.038,13,1.232,17,0.124,18,0.124,19,0.105,21,0.291,30,0.663,34,0.791,38,1.191,39,1.191,40,0.612,41,1.079,43,1.38,45,0.439,48,0.188,50,0.583,61,2.405,62,0.83,63,2.296,64,1.406,74,1.633,76,0.124,77,0.022,80,0.012,81,0.012,82,0.806,87,1.236,94,1.633,96,1.633,97,2.753,98,0.236,104,1.158,108,2.192,109,3.663,111,1.362,114,1.43,116,1.233,126,1.283,130,0.73,131,0.987,136,1.763,150,1.834,161,0.95,163,0.73,173,0.987,178,0.965,188,0.4,189,0.476,190,0.965,191,1.978,192,1.978,193,1.978,194,1.978,195,1.978,196,1.406,197,1.882,198,1.978,199,1.978,200,1.978,201,3.138,202,3.385,203,1.978,204,3.676,205,3.676,206,2.498,207,1.978,208,1.978,209,2.569,210,1.978,211,1.978,212,1.978,213,1.978,214,1.978,215,1.978,216,0.965,217,1.683,218,2.572,219,1.954,220,1.169,221,1.633,222,1.978,223,1.169,224,2.498,225,1.633,226,1.978,227,1.978,228,1.978,229,1.978,230,2.106,231,1.978,232,1.169,233,0.73,234,1.978,235,1.169,236,1.978,237,1.978,238,1.978,239,1.978,240,1.169,241,1.978,242,1.978,243,2.405,244,1.978,245,1.169,246,1.406,247,1.978,248,1.633,249,1.978,250,2.498,251,1.978,252,1.633,253,1.978,254,1.978,255,1.978,256,1.978,257,0.987,258,1.978,259,1.169,260,1.978,261,1.978,262,0.965,263,0.965,264,1.169,265,0.965,266,0.73,267,1.169,268,1.169,269,1.169,270,0.965,271,1.169,272,2.405,273,1.169,274,2.335,275,2.753,276,1.169,277,0.965,278,1.169,279,0.83,280,1.169,281,1.169,282,0.965,283,2.572,284,1.169,285,1.978,286,1.169,287,1.978,288,1.169,289,3.034,290,2.296,291,3.027,292,1.169,293,1.169,294,2.572,295,2.572,296,1.978,297,1.169,298,1.169,299,1.169,300,1.169,301,1.169,302,1.169,303,1.169,304,1.169,305,2.572,306,1.978,307,1.169,308,1.169,309,1.169,310,1.169,311,1.169,312,1.169,313,0.965,314,0.965,315,1.169,316,1.978,317,1.169,318,1.169,319,1.169]],["title/classes/AuthSignup.html",[77,0.057,116,1.227]],["body/classes/AuthSignup.html",[8,0.037,17,0.338,18,0.338,19,0.286,34,1.034,40,0.866,45,0.338,76,0.511,77,0.096,80,0.026,81,0.026,98,0.641,104,2.6,105,2.157,108,2.304,111,2.403,116,1.731,147,1.763,148,1.981,149,2.12,150,2.555,151,2.617,153,3.019,155,3.405,156,3.198,157,3.198,158,3.335,159,1.763,160,2.363,161,1.77,162,1.763,163,3.198,164,1.427,320,3.171,321,3.171,322,4.249,323,3.171,324,3.171]],["title/classes/CreateBookmarkDto.html",[77,0.057,325,1.675]],["body/classes/CreateBookmarkDto.html",[8,0.037,17,0.385,18,0.385,19,0.326,21,1.273,34,1.032,40,0.923,41,1.275,45,0.385,76,0.385,77,0.087,80,0.028,81,0.028,98,0.73,104,2.564,105,2.298,147,2.008,149,2.309,153,3.288,156,3.19,157,2.891,158,3.364,159,2.008,325,2.573,326,2.982,327,5.107,328,5.107,329,2.982,330,3.612,331,3.612,332,3.612]],["title/classes/EditUser.html",[77,0.057,164,1.356]],["body/classes/EditUser.html",[8,0.038,17,0.349,18,0.349,19,0.296,34,0.985,40,0.881,45,0.349,76,0.519,77,0.098,80,0.027,81,0.027,98,0.663,104,2.618,105,2.193,108,2.335,111,1.956,116,1.336,147,1.823,148,2.048,149,2.168,150,2.589,155,3.463,156,3.241,157,3.241,158,3.372,159,1.823,160,1.823,161,1.211,162,1.823,163,3.241,164,1.956,329,3.587,333,3.279,334,3.279,335,3.279,336,3.279]],["title/injectables/JwtStrategy.html",[168,1.675,188,0.609]],["body/injectables/JwtStrategy.html",[8,0.038,13,1.689,17,0.325,18,0.325,19,0.275,30,1.387,34,0.836,38,1.259,39,1.259,40,0.911,41,1.141,43,1.022,45,0.561,48,0.49,50,1.522,76,0.325,77,0.057,80,0.025,81,0.025,98,0.616,126,1.522,136,1.373,160,1.696,161,1.126,162,1.696,168,2.302,188,0.836,189,1.242,197,1.696,201,1.905,209,2.345,217,2.802,230,1.863,233,1.905,257,2.345,266,1.905,272,2.167,274,1.522,275,1.696,313,2.518,314,2.518,337,2.518,338,3.417,339,3.417,340,3.05,341,4.139,342,4.139,343,3.05,344,3.05,345,1.905,346,3.05,347,3.05,348,2.518,349,3.05,350,3.05,351,3.05,352,3.05,353,3.05,354,3.05,355,2.167,356,3.05,357,2.167,358,2.518]],["title/injectables/LogRequest.html",[52,1.881,188,0.609]],["body/injectables/LogRequest.html",[8,0.038,17,0.326,18,0.326,19,0.276,21,0.763,24,2.806,26,3.424,30,1.39,34,0.618,38,0.93,39,0.93,40,0.553,41,0.843,43,1.025,44,2.526,45,0.442,48,0.491,52,2.591,76,0.326,77,0.058,78,2.526,80,0.026,81,0.026,89,3.424,98,0.618,188,0.838,189,1.246,274,2.07,277,2.526,359,2.526,360,4.148,361,4.148,362,4.148,363,4.148,364,4.148,365,4.148,366,4.148,367,5.046,368,5.046,369,5.046,370,5.046,371,3.06,372,2.947,373,4.148,374,1.701,375,3.06,376,4.706,377,4.706,378,3.06,379,3.06,380,3.06,381,3.06,382,3.06,383,3.06,384,3.06]],["title/modules/MailModule.html",[0,0.83,9,1.503]],["body/modules/MailModule.html",[0,1.329,2,1.017,3,1.424,8,0.038,9,2.697,14,1.736,15,1.239,16,1.121,17,0.293,18,0.293,19,0.248,21,0.686,28,1.924,29,1.956,45,0.561,48,0.442,50,1.374,67,2.272,70,2.74,72,1.956,76,0.293,77,0.052,80,0.024,81,0.024,87,1.719,97,2.145,108,1.736,173,1.924,187,2.74,197,1.531,209,1.374,217,2.475,219,2.89,230,1.239,263,2.272,290,1.719,385,2.272,386,2.272,387,2.272,388,2.753,389,3.427,390,3.857,391,3.857,392,2.753,393,1.956,394,3.857,395,2.753,396,2.753,397,2.753,398,2.753,399,2.753,400,2.753,401,2.753,402,2.753,403,2.272,404,2.753,405,2.272,406,2.753,407,2.753,408,2.753,409,2.753,410,2.753,411,2.753,412,2.753,413,2.753,414,2.753,415,2.272,416,2.753,417,2.753,418,2.753,419,2.753,420,2.753,421,2.753]],["title/injectables/MailService.html",[188,0.609,219,1.503]],["body/injectables/MailService.html",[8,0.038,17,0.313,18,0.313,19,0.416,21,0.732,23,1.835,30,1.352,34,0.815,38,1.227,39,1.227,40,0.729,41,1.112,43,0.985,45,0.491,48,0.472,76,0.313,77,0.055,80,0.025,81,0.025,97,2.563,98,0.594,104,2.074,108,2.559,126,2.3,134,1.466,161,1.085,173,1.466,188,0.815,189,1.197,209,2.3,219,2.013,230,1.322,274,1.466,275,1.634,393,2.087,405,3.331,415,2.425,422,2.425,423,4.035,424,4.035,425,4.035,426,4.035,427,4.035,428,4.035,429,4.035,430,4.035,431,4.035,432,2.938,433,5.372,434,2.938,435,4.035,436,2.938,437,2.938,438,2.425,439,2.938,440,2.938,441,2.938,442,2.938,443,2.938,444,2.938,445,2.938,446,2.938,447,2.938]],["title/modules/PrismaModule.html",[0,0.83,10,1.675]],["body/modules/PrismaModule.html",[0,1.451,2,1.834,3,1.646,8,0.037,10,3.177,13,2.009,14,2.006,15,1.533,16,1.388,17,0.363,18,0.363,19,0.307,21,0.849,28,2.224,45,0.475,48,0.547,76,0.363,77,0.064,80,0.027,81,0.027,181,3.678,187,3.166,196,3.166,257,2.628,389,3.166,403,3.678,448,2.812,449,3.407,450,2.812,451,3.407,452,4.456,453,4.456,454,4.456,455,4.456,456,3.407]],["title/injectables/PrismaService.html",[13,1.009,188,0.609]],["body/injectables/PrismaService.html",[8,0.038,13,1.555,17,0.386,18,0.386,19,0.327,21,0.904,34,0.733,38,1.102,39,1.102,40,0.655,41,0.999,45,0.545,48,0.582,50,1.809,76,0.386,77,0.068,80,0.029,81,0.029,160,2.58,161,1.339,162,2.016,188,0.937,189,1.477,197,2.016,217,2.999,339,3.829,438,2.993,457,2.993,458,4.639,459,5.574,460,3.626,461,2.993,462,3.626,463,2.993,464,3.626]],["title/controllers/SavedPostController.html",[82,1.227,465,1.881]],["body/controllers/SavedPostController.html",[8,0.038,17,0.265,18,0.265,19,0.225,24,1.384,30,1.203,34,0.931,38,1.402,39,1.402,40,0.833,41,1.27,43,1.545,45,0.521,48,0.4,57,2.342,58,2.718,76,0.265,77,0.047,80,0.022,81,0.022,82,1.014,84,1.12,86,1.768,98,0.503,105,2.075,114,1.996,126,2.541,129,3.473,134,1.242,136,2.075,325,2.563,345,1.555,357,1.768,372,3.948,374,1.384,465,2.242,466,3.053,467,2.054,468,3.59,469,3.476,470,3.59,471,3.59,472,2.489,473,3.805,474,2.489,475,2.489,476,4.435,477,3.59,478,2.489,479,2.489,480,3.59,481,2.489,482,2.489,483,2.489,484,2.489,485,4.211,486,2.054,487,2.054,488,2.054,489,1.791,490,2.054,491,2.054,492,2.489,493,2.489,494,2.489,495,2.489,496,2.489,497,3.59,498,2.489,499,2.489,500,2.489,501,2.489]],["title/modules/SavedPostModule.html",[0,0.83,11,1.675]],["body/modules/SavedPostModule.html",[0,1.31,2,1.392,3,1.756,8,0.037,11,3.202,14,2.14,15,1.696,16,1.535,17,0.401,18,0.401,19,0.34,28,2.372,45,0.555,48,0.605,57,2.643,58,2.095,76,0.401,77,0.071,80,0.029,81,0.029,84,2.14,465,3.253,466,2.353,489,2.873,490,3.11,502,3.11,503,3.11,504,3.768,505,3.768]],["title/injectables/SavedPostService.html",[188,0.609,489,1.503]],["body/injectables/SavedPostService.html",[8,0.038,13,1.489,17,0.245,18,0.245,19,0.208,30,1.137,34,0.957,38,1.441,39,1.441,40,0.856,41,1.306,43,1.489,45,0.429,48,0.37,58,2.756,76,0.245,77,0.043,80,0.021,81,0.021,98,0.465,126,2.922,134,1.15,136,1.813,161,0.851,188,0.686,189,0.938,206,4.569,209,2.473,233,1.439,257,1.693,262,1.902,266,1.439,274,1.693,275,2.24,279,1.637,289,1.902,290,1.439,325,2.471,355,2.862,466,3.096,469,2.801,473,3.669,476,3.911,488,1.902,489,1.693,506,1.902,507,3.393,508,3.393,509,3.393,510,2.304,511,2.304,512,3.393,513,2.304,514,3.393,515,2.304,516,3.393,517,2.304,518,3.393,519,4.445,520,2.304,521,2.304,522,2.304,523,4.445,524,2.304,525,2.304,526,2.304,527,2.304,528,2.304,529,2.304,530,2.304]],["title/controllers/UserController.html",[82,1.227,531,1.881]],["body/controllers/UserController.html",[8,0.038,17,0.306,18,0.306,19,0.26,21,0.717,24,3.042,30,1.333,34,0.803,38,1.209,39,1.209,40,0.719,41,1.096,43,1.333,45,0.55,48,0.462,57,2.211,76,0.306,77,0.054,80,0.024,81,0.024,82,1.856,84,1.295,86,2.044,98,0.581,105,1.79,114,1.599,116,1.172,129,2.044,130,1.797,134,1.435,136,1.79,150,1.984,164,2.213,230,2.323,345,1.797,372,3.887,374,1.599,486,2.374,487,2.374,491,2.374,531,2.484,532,2.374,533,3.976,534,3.976,535,3.282,536,3.282,537,3.976,538,3.976,539,2.876,540,3.976,541,2.876,542,2.876,543,3.976,544,2.876,545,2.274,546,2.374,547,2.876,548,2.876,549,3.976,550,2.876,551,2.876]],["title/modules/UserModule.html",[0,0.83,12,1.675]],["body/modules/UserModule.html",[0,1.469,2,1.3,3,1.681,8,0.037,12,3.146,14,2.048,15,1.584,16,1.434,17,0.375,18,0.375,19,0.318,21,0.877,28,2.271,45,0.537,48,0.565,57,2.531,76,0.375,77,0.066,80,0.028,81,0.028,84,2.048,150,2.271,224,3.757,230,2.048,531,3.151,535,3.757,536,3.757,545,2.823,546,2.905,552,2.905,553,2.905,554,3.519,555,3.757,556,4.551,557,3.519]],["title/injectables/UserService.html",[188,0.609,545,1.503]],["body/injectables/UserService.html",[8,0.038,13,1.635,17,0.301,18,0.301,19,0.255,30,1.316,34,0.794,38,1.194,39,1.194,40,0.71,41,1.082,43,0.947,45,0.546,48,0.454,50,1.41,76,0.301,77,0.053,80,0.024,81,0.024,98,0.571,130,1.765,134,1.41,136,1.768,161,1.044,164,2.389,188,0.794,189,1.151,197,2.51,209,2.253,216,2.332,217,2.713,221,3.242,230,2.45,233,1.765,243,2.008,250,3.242,265,2.332,266,1.765,272,2.008,274,2.253,275,2.51,279,2.791,282,2.332,355,2.791,357,3.208,358,3.242,545,1.96,558,2.332,559,2.826,560,3.928,561,4.515,562,2.826,563,3.928,564,2.826,565,3.928,566,3.928,567,2.826]],["title/coverage.html",[568,3.388]],["body/coverage.html",[8,0.037,13,1.063,19,0.286,40,0.573,52,1.981,58,2.363,77,0.096,80,0.026,81,0.026,82,1.952,83,1.981,85,2.617,111,1.427,116,1.292,131,1.582,148,2.993,164,1.427,168,1.763,188,1.134,190,2.617,219,1.582,290,1.981,325,1.763,326,2.617,337,2.617,359,2.617,422,2.617,457,2.617,465,1.981,466,2.654,467,2.617,489,1.582,506,2.617,531,1.981,532,2.617,545,1.582,558,2.617,568,2.617,569,2.617,570,3.171,571,3.171,572,5.704,573,4.792,574,4.249,575,4.249,576,4.792,577,3.171,578,3.171,579,3.171,580,4.249,581,2.617,582,3.171,583,2.617,584,3.171,585,3.171,586,4.249,587,4.249,588,3.171,589,3.171,590,3.171]],["title/dependencies.html",[3,1.337,591,2.079]],["body/dependencies.html",[3,1.228,8,0.038,48,0.534,61,3.115,62,3.486,63,2.739,64,3.115,77,0.082,80,0.027,81,0.027,159,1.849,173,1.659,201,2.739,243,2.362,257,1.659,345,2.077,348,4.05,374,1.849,393,2.362,461,2.744,592,3.324,593,5.217,594,3.324,595,3.324,596,4.385,597,3.324,598,3.324,599,3.324,600,3.324,601,4.385,602,3.324,603,4.385,604,3.324,605,3.324,606,3.324,607,3.324,608,3.324,609,3.324,610,3.324,611,3.324,612,3.324,613,3.324,614,3.324,615,3.324,616,3.324,617,3.324,618,3.324,619,3.324,620,3.324,621,3.324,622,3.324,623,3.324,624,3.324]],["title/miscellaneous/functions.html",[625,2.079,626,2.989]],["body/miscellaneous/functions.html",[8,0.032,16,1.771,23,2.716,24,2.418,80,0.032,81,0.032,98,0.878,114,2.418,246,3.089,338,3.589,389,3.089,581,3.589,583,4.581,625,3.589,626,3.589,627,4.348,628,4.348,629,3.589,630,4.348,631,4.348,632,4.348,633,3.589]],["title/index.html",[98,0.509,634,2.518,635,2.518]],["body/index.html",[8,0.034,23,1.936,63,1.936,70,2.202,72,2.202,80,0.026,81,0.026,87,1.936,97,1.723,123,2.558,173,2.088,196,3.764,201,1.936,225,2.558,246,2.973,252,2.558,257,2.784,374,1.723,463,2.558,555,2.558,569,2.558,629,2.558,633,2.558,636,3.099,637,4.184,638,3.099,639,3.099,640,3.099,641,5.072,642,5.072,643,4.184,644,3.099,645,3.099,646,3.099,647,3.099,648,3.099,649,3.099,650,4.184,651,4.184,652,3.099,653,3.099,654,3.099,655,3.099,656,3.099,657,3.099,658,4.184,659,3.099,660,4.184,661,4.184,662,3.099,663,3.099,664,3.099,665,3.099,666,3.099,667,3.099,668,3.099,669,3.099,670,3.099,671,3.099,672,3.099,673,4.184,674,3.099,675,3.099,676,3.099,677,3.099,678,3.099,679,3.099,680,3.099,681,3.099,682,3.099,683,3.099,684,3.099,685,3.099,686,3.099,687,3.099,688,3.099,689,4.184,690,3.099,691,3.099,692,3.099,693,3.099,694,2.558]],["title/modules.html",[2,1.516]],["body/modules.html",[1,2.598,2,1.536,7,2.313,8,0.031,9,2.075,10,2.313,11,2.313,12,2.313,80,0.031,81,0.031,694,4.87,695,5.9,696,5.9,697,5.9]],["title/overview.html",[698,3.388]],["body/overview.html",[1,3.723,2,1.119,3,1.522,4,2.502,5,2.502,6,2.502,7,3.183,8,0.037,9,2.768,10,3.015,11,2.923,12,2.923,13,1.892,14,1.855,15,1.364,16,1.234,80,0.025,81,0.025,84,1.364,131,2.337,147,1.685,165,2.502,167,2.502,168,2.604,189,1.234,219,2.768,270,2.502,385,2.502,386,2.502,387,2.502,448,2.502,450,2.502,489,2.337,502,2.502,503,2.502,545,2.337,552,2.502,553,2.502,698,2.502,699,3.031,700,3.031,701,3.031]],["title/properties.html",[149,1.807,591,2.079]],["body/properties.html",[8,0.037,21,1.135,80,0.033,81,0.033,149,2.272,248,3.759,702,4.554,703,4.554,704,4.554,705,4.554]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":702,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["0.29.1",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["1000000",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["1200",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["15m",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["1d",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.0.0",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["2.0.1",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":700,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["4.0.0",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["5434",{"_index":690,"title":{},"body":{"index.html":{}}}],["587",{"_index":407,"title":{},"body":{"modules/MailModule.html":{}}}],["6",{"_index":699,"title":{},"body":{"overview.html":{}}}],["6.4.6",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["6.7.8",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["6379",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":701,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["adapter",{"_index":419,"title":{},"body":{"modules/MailModule.html":{}}}],["already",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["analysis",{"_index":364,"title":{},"body":{"injectables/LogRequest.html":{}}}],["api",{"_index":647,"title":{},"body":{"index.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/MailService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["application",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":663,"title":{},"body":{"index.html":{}}}],["architechture",{"_index":638,"title":{},"body":{"index.html":{}}}],["argon",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["argon.hash(body.password",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(user.password",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["argon.verify(user.pw",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["arguments",{"_index":430,"title":{},"body":{"injectables/MailService.html":{}}}],["async",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/MailModule.html":{},"index.html":{}}}],["auth.controller",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":639,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":487,"title":{},"body":{"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["authlogin",{"_index":111,"title":{"classes/AuthLogin.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"coverage.html":{}}}],["authlogin:10",{"_index":324,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authlogin:6",{"_index":323,"title":{},"body":{"classes/AuthSignup.html":{}}}],["authmodule",{"_index":7,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":705,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":131,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authsignup",{"_index":116,"title":{"classes/AuthSignup.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["available",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["await",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["awesome",{"_index":679,"title":{},"body":{"index.html":{}}}],["backend",{"_index":644,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":375,"title":{},"body":{"injectables/LogRequest.html":{}}}],["better",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["body('email",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('otp",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.email",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.firstname",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["bookmark",{"_index":523,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["bookmark.userid",{"_index":526,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["bookmarkid",{"_index":519,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["bootstrap",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":697,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":695,"title":{},"body":{"modules.html":{}}}],["cacha_manager",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["cache",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["cacheotp",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["cases",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["change",{"_index":536,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["class",{"_index":77,"title":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":147,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":385,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":387,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":386,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":448,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":450,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":449,"title":{},"body":{"modules/PrismaModule.html":{}}}],["cluster_savedpostmodule",{"_index":502,"title":{},"body":{"modules/SavedPostModule.html":{},"overview.html":{}}}],["cluster_savedpostmodule_providers",{"_index":503,"title":{},"body":{"modules/SavedPostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":552,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":553,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["compose",{"_index":653,"title":{},"body":{"index.html":{}}}],["config",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["config.get('database_url",{"_index":464,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get('jwt_secret",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config.get('mail_host",{"_index":402,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_password",{"_index":412,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_user",{"_index":410,"title":{},"body":{"modules/MailModule.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["configure",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":425,"title":{},"body":{"injectables/MailService.html":{}}}],["configuring",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":445,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmation",{"_index":446,"title":{},"body":{"injectables/MailService.html":{}}}],["connection",{"_index":453,"title":{},"body":{"modules/PrismaModule.html":{}}}],["console.log",{"_index":440,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log('here",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`\"${originalurl",{"_index":379,"title":{},"body":{"injectables/LogRequest.html":{}}}],["console.log(email",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(req.user",{"_index":494,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["console.log(res",{"_index":383,"title":{},"body":{"injectables/LogRequest.html":{}}}],["const",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":161,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":339,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(mailerservice",{"_index":432,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(postgre",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(prisma",{"_index":510,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["constructor(private",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MailService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["construstor",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logrequest).forroutes",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":447,"title":{},"body":{"injectables/MailService.html":{}}}],["controller",{"_index":82,"title":{"controllers/AuthController.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('saved",{"_index":492,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["controller('user",{"_index":547,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":568,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createbookmark",{"_index":468,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["createbookmark(@req",{"_index":499,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["createbookmark(req",{"_index":472,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["createbookmarkdto",{"_index":325,"title":{"classes/CreateBookmarkDto.html":{}},"body":{"classes/CreateBookmarkDto.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"coverage.html":{}}}],["created",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["creatsaved",{"_index":507,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["creatsaved(userid",{"_index":512,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["currently",{"_index":682,"title":{},"body":{"index.html":{}}}],["data",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["database",{"_index":677,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":462,"title":{},"body":{"injectables/PrismaService.html":{}}}],["db",{"_index":463,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["dbuser",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["dbuser.id",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["debugging",{"_index":363,"title":{},"body":{"injectables/LogRequest.html":{}}}],["decorators",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["defaults",{"_index":413,"title":{},"body":{"modules/MailModule.html":{}}}],["define",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/SavedPostController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":477,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["deletebookmarkbyid",{"_index":469,"title":{},"body":{"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{}}}],["deletebookmarkbyid(req",{"_index":475,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["deletebookmarkbyid(userid",{"_index":514,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["denied",{"_index":529,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["dependecies",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateBookmarkDto.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"properties.html":{}}}],["designed",{"_index":360,"title":{},"body":{"injectables/LogRequest.html":{}}}],["dev",{"_index":675,"title":{},"body":{"index.html":{}}}],["dir",{"_index":416,"title":{},"body":{"modules/MailModule.html":{}}}],["docker",{"_index":642,"title":{},"body":{"index.html":{}}}],["docs",{"_index":650,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":569,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentations",{"_index":662,"title":{},"body":{"index.html":{}}}],["doesnt",{"_index":683,"title":{},"body":{"index.html":{}}}],["done",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto",{"_index":473,"title":{},"body":{"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{}}}],["easily",{"_index":671,"title":{},"body":{"index.html":{}}}],["edge",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["editmydata",{"_index":537,"title":{},"body":{"controllers/UserController.html":{}}}],["editmydata(@body",{"_index":550,"title":{},"body":{"controllers/UserController.html":{}}}],["editmydata(user",{"_index":539,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":164,"title":{"classes/EditUser.html":{}},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituser(user",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["email",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["emailing",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["enterred",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["env",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["etc",{"_index":556,"title":{},"body":{"modules/UserModule.html":{}}}],["example.com/auth/confirm?token=${token",{"_index":439,"title":{},"body":{"injectables/MailService.html":{}}}],["expired",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiry",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exporting",{"_index":454,"title":{},"body":{"modules/PrismaModule.html":{}}}],["exports",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{}}}],["express",{"_index":374,"title":{},"body":{"injectables/LogRequest.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"index.html":{}}}],["extends",{"_index":160,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["extracting",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["extractjwt",{"_index":346,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":409,"title":{},"body":{"modules/MailModule.html":{}}}],["features",{"_index":637,"title":{},"body":{"index.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":656,"title":{},"body":{"index.html":{}}}],["finding",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":651,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":163,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{}}}],["flexible",{"_index":669,"title":{},"body":{"index.html":{}}}],["followed",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SavedPostService.html":{}}}],["forbiddenexception('access",{"_index":527,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["forbiddenexception('credentials",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('session",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('wrong",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgot",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotlogic",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotlogic(email",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpwd",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(@body('email",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpwd(email",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["framework",{"_index":645,"title":{},"body":{"index.html":{}}}],["function",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":626,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generating",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["geotaging",{"_index":688,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":480,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["get('me",{"_index":543,"title":{},"body":{"controllers/UserController.html":{}}}],["getallsaved",{"_index":508,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["getallsaved(userid",{"_index":516,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["getbookmarkbyid",{"_index":470,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getbookmarkbyid(@req",{"_index":496,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getbookmarkbyid(req",{"_index":479,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getbookmarks",{"_index":471,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getbookmarks(@req",{"_index":493,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getbookmarks(req",{"_index":482,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["getinfo",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["getotp",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["getotp(email",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsavedbyid",{"_index":509,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["getsavedbyid(userid",{"_index":518,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["getting",{"_index":634,"title":{"index.html":{}},"body":{}}],["global",{"_index":389,"title":{},"body":{"modules/MailModule.html":{},"modules/PrismaModule.html":{},"miscellaneous/functions.html":{}}}],["globally",{"_index":455,"title":{},"body":{"modules/PrismaModule.html":{}}}],["gmail",{"_index":404,"title":{},"body":{"modules/MailModule.html":{}}}],["graph",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["guess",{"_index":666,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":394,"title":{},"body":{"modules/MailModule.html":{}}}],["handled",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hbs",{"_index":427,"title":{},"body":{"injectables/MailService.html":{}}}],["headers",{"_index":376,"title":{},"body":{"injectables/LogRequest.html":{}}}],["help",{"_index":632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"index.html":{}}}],["html/js",{"_index":655,"title":{},"body":{"index.html":{}}}],["icomming",{"_index":631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":390,"title":{},"body":{"modules/MailModule.html":{}}}],["implemented",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["implementing",{"_index":458,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implements",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["import",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["incomming",{"_index":362,"title":{},"body":{"injectables/LogRequest.html":{}}}],["incorrect",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":98,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":322,"title":{},"body":{"classes/AuthSignup.html":{}}}],["init",{"_index":628,"title":{},"body":{"miscellaneous/functions.html":{}}}],["initiated",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["initiating",{"_index":452,"title":{},"body":{"modules/PrismaModule.html":{}}}],["inject",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{}}}],["inject(cache_manager",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":188,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injected",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["inserting",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["instance",{"_index":689,"title":{},"body":{"index.html":{}}}],["isemail",{"_index":155,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{}}}],["isemail()@isnotempty",{"_index":151,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{}}}],["isemail()@isoptional",{"_index":333,"title":{},"body":{"classes/EditUser.html":{}}}],["isglobal",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":156,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{}}}],["isoptional",{"_index":157,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{}}}],["isstring",{"_index":158,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{}}}],["isstring()@isnotempty",{"_index":153,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{}}}],["isstring()@isoptional",{"_index":329,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{}}}],["jobs",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["join",{"_index":397,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":417,"title":{},"body":{"modules/MailModule.html":{}}}],["json.stringify",{"_index":380,"title":{},"body":{"injectables/LogRequest.html":{}}}],["jwt",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsign(userid",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":168,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["know",{"_index":687,"title":{},"body":{"index.html":{}}}],["learnt",{"_index":636,"title":{},"body":{"index.html":{}}}],["lets",{"_index":384,"title":{},"body":{"injectables/LogRequest.html":{}}}],["license",{"_index":703,"title":{},"body":{"properties.html":{}}}],["link",{"_index":327,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["literal",{"_index":342,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":361,"title":{},"body":{"injectables/LogRequest.html":{}}}],["logging",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["login",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginlogic",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginlogic(body",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["logrequest",{"_index":52,"title":{"injectables/LogRequest.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"coverage.html":{}}}],["love",{"_index":667,"title":{},"body":{"index.html":{}}}],["mail.service",{"_index":396,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":392,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":399,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":433,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":9,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":219,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["maintain",{"_index":664,"title":{},"body":{"index.html":{}}}],["make",{"_index":658,"title":{},"body":{"index.html":{}}}],["manage",{"_index":672,"title":{},"body":{"index.html":{}}}],["management",{"_index":649,"title":{},"body":{"index.html":{}}}],["manager",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["matching",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["maybe",{"_index":686,"title":{},"body":{"index.html":{}}}],["message",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":377,"title":{},"body":{"injectables/LogRequest.html":{}}}],["methods",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["middlewareconsumer",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["migrate",{"_index":674,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":625,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":393,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":395,"title":{},"body":{"modules/MailModule.html":{}}}],["moniter",{"_index":676,"title":{},"body":{"index.html":{}}}],["mydata",{"_index":538,"title":{},"body":{"controllers/UserController.html":{}}}],["mydata(@req",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["mydata(req",{"_index":542,"title":{},"body":{"controllers/UserController.html":{}}}],["mysql",{"_index":685,"title":{},"body":{"index.html":{}}}],["name",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nestjs",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["nestjs/core",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nestjs/passport",{"_index":345,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":373,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nestmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/SavedPostService.html":{},"coverage.html":{}}}],["next",{"_index":369,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nextfunction",{"_index":370,"title":{},"body":{"injectables/LogRequest.html":{}}}],["nice",{"_index":444,"title":{},"body":{"injectables/MailService.html":{}}}],["nodemailer",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["npx",{"_index":673,"title":{},"body":{"index.html":{}}}],["number",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{}}}],["object",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateBookmarkDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":420,"title":{},"body":{"modules/MailModule.html":{}}}],["originalurl",{"_index":378,"title":{},"body":{"injectables/LogRequest.html":{}}}],["orm",{"_index":668,"title":{},"body":{"index.html":{}}}],["otp",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"index.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["overview",{"_index":698,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":591,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":484,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["param('id",{"_index":497,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":485,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["pass",{"_index":411,"title":{},"body":{"modules/MailModule.html":{}}}],["passing",{"_index":429,"title":{},"body":{"injectables/MailService.html":{}}}],["passport",{"_index":348,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjs",{"_index":648,"title":{},"body":{"index.html":{}}}],["passportstrategy",{"_index":344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":349,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":150,"title":{},"body":{"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["passwords",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwrod",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":398,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["piplines",{"_index":630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["place",{"_index":652,"title":{},"body":{"index.html":{}}}],["port",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"index.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["post('/forgotpwd",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/hehe",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/verifyotp",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('edit",{"_index":540,"title":{},"body":{"controllers/UserController.html":{}}}],["post.controller",{"_index":505,"title":{},"body":{"modules/SavedPostModule.html":{}}}],["post.controller.ts",{"_index":467,"title":{},"body":{"controllers/SavedPostController.html":{},"coverage.html":{}}}],["post.controller.ts:23",{"_index":483,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["post.controller.ts:30",{"_index":481,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["post.controller.ts:35",{"_index":474,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["post.controller.ts:40",{"_index":478,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["post.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["post.module.ts",{"_index":504,"title":{},"body":{"modules/SavedPostModule.html":{}}}],["post.service",{"_index":490,"title":{},"body":{"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{}}}],["post.service.ts",{"_index":506,"title":{},"body":{"injectables/SavedPostService.html":{},"coverage.html":{}}}],["post.service.ts:17",{"_index":520,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["post.service.ts:26",{"_index":513,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["post.service.ts:37",{"_index":515,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["post.service.ts:6",{"_index":511,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["post.service.ts:9",{"_index":517,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["post/saved",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"coverage.html":{}}}],["postgre",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["postgres",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"index.html":{}}}],["posts",{"_index":535,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["prefix",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/SavedPostService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.service",{"_index":456,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":461,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":459,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":10,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":13,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["promise",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["properties",{"_index":149,"title":{"properties.html":{}},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"properties.html":{}}}],["provided",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{}}}],["purposes",{"_index":391,"title":{},"body":{"modules/MailModule.html":{}}}],["pw",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["pwmatches",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["python",{"_index":646,"title":{},"body":{"index.html":{}}}],["quering",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["random",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["reddistore",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["redis",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["reflect",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["relations",{"_index":670,"title":{},"body":{"index.html":{}}}],["relationships",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["relay.sendinblue.com",{"_index":406,"title":{},"body":{"modules/MailModule.html":{}}}],["reply",{"_index":414,"title":{},"body":{"modules/MailModule.html":{}}}],["req",{"_index":372,"title":{},"body":{"injectables/LogRequest.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{},"controllers/SavedPostController.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["requests",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LogRequest.html":{}}}],["required",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["res",{"_index":367,"title":{},"body":{"injectables/LogRequest.html":{}}}],["res.on('close",{"_index":381,"title":{},"body":{"injectables/LogRequest.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":528,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["response",{"_index":368,"title":{},"body":{"injectables/LogRequest.html":{}}}],["responses",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["respsent",{"_index":382,"title":{},"body":{"injectables/LogRequest.html":{}}}],["results",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieved",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["rn",{"_index":681,"title":{},"body":{"index.html":{}}}],["root",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["routes",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["routs",{"_index":533,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":643,"title":{},"body":{"index.html":{}}}],["running",{"_index":693,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["saved",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["savedid",{"_index":476,"title":{},"body":{"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{}}}],["savedpostcontroller",{"_index":465,"title":{"controllers/SavedPostController.html":{}},"body":{"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"coverage.html":{}}}],["savedpostmodule",{"_index":11,"title":{"modules/SavedPostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SavedPostModule.html":{},"modules.html":{},"overview.html":{}}}],["savedpostservice",{"_index":489,"title":{"injectables/SavedPostService.html":{}},"body":{"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"coverage.html":{},"overview.html":{}}}],["secret",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretkey",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":408,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendgrid",{"_index":423,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserconfirmation",{"_index":431,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserconfirmation(otp",{"_index":435,"title":{},"body":{"injectables/MailService.html":{}}}],["sense",{"_index":684,"title":{},"body":{"index.html":{}}}],["servce",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["serve",{"_index":660,"title":{},"body":{"index.html":{}}}],["server",{"_index":424,"title":{},"body":{"injectables/MailService.html":{}}}],["service",{"_index":403,"title":{},"body":{"modules/MailModule.html":{},"modules/PrismaModule.html":{}}}],["services",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["serving",{"_index":426,"title":{},"body":{"injectables/MailService.html":{}}}],["setup",{"_index":555,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["sha",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplogic",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["signuplogic(body",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["site",{"_index":659,"title":{},"body":{"index.html":{}}}],["smtp",{"_index":405,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["socket",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../main.ts",{"_index":627,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:46",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:107",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:127",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:134",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/entities/user.entity",{"_index":437,"title":{},"body":{"injectables/MailService.html":{}}}],["src/auth/jwtstrategy.ts",{"_index":337,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwtstrategy.ts:16",{"_index":343,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwtstrategy.ts:8",{"_index":340,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/mail/mail.module",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mail/mail.module.ts",{"_index":388,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mail/mail.service.ts",{"_index":422,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:12",{"_index":436,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:9",{"_index":434,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":581,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/requestlog.ts",{"_index":359,"title":{},"body":{"injectables/LogRequest.html":{},"coverage.html":{}}}],["src/middleware/requestlog.ts:9",{"_index":371,"title":{},"body":{"injectables/LogRequest.html":{}}}],["src/prisma/prisma.module.ts",{"_index":451,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":457,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:9",{"_index":460,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/saved",{"_index":466,"title":{},"body":{"controllers/SavedPostController.html":{},"modules/SavedPostModule.html":{},"injectables/SavedPostService.html":{},"coverage.html":{}}}],["src/typings",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/typings/auth.ts",{"_index":148,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"coverage.html":{}}}],["src/typings/auth.ts:10",{"_index":154,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/auth.ts:12",{"_index":320,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:18",{"_index":321,"title":{},"body":{"classes/AuthSignup.html":{}}}],["src/typings/auth.ts:24",{"_index":334,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:27",{"_index":336,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:30",{"_index":335,"title":{},"body":{"classes/EditUser.html":{}}}],["src/typings/auth.ts:6",{"_index":152,"title":{},"body":{"classes/AuthLogin.html":{}}}],["src/typings/saved",{"_index":488,"title":{},"body":{"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{}}}],["src/typings/saved.ts",{"_index":326,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"coverage.html":{}}}],["src/typings/saved.ts:10",{"_index":330,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["src/typings/saved.ts:14",{"_index":331,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["src/typings/saved.ts:6",{"_index":332,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["src/user/user.controller.ts",{"_index":532,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:17",{"_index":544,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:22",{"_index":541,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":554,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":558,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":640,"title":{},"body":{"index.html":{}}}],["started",{"_index":635,"title":{"index.html":{}},"body":{}}],["statements",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":654,"title":{},"body":{"index.html":{}}}],["store",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["storing",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategy",{"_index":347,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":421,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/MailService.html":{}}}],["studio",{"_index":678,"title":{},"body":{"index.html":{}}}],["sub",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":442,"title":{},"body":{"injectables/MailService.html":{}}}],["subset",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["super",{"_index":162,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["support",{"_index":694,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supprt",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["svg",{"_index":696,"title":{},"body":{"modules.html":{}}}],["table",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["taken",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["template",{"_index":415,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":418,"title":{},"body":{"modules/MailModule.html":{}}}],["templete",{"_index":428,"title":{},"body":{"injectables/MailService.html":{}}}],["test",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(@body('email",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(email",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["testing",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["things",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["thinking",{"_index":657,"title":{},"body":{"index.html":{}}}],["this.authservice.forgotlogic(email",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getotp(email",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginlogic(body",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplogic(body",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifylogic(otp",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.del(email",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(email",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(email",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.get('jwt_secret",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtsign(user.id",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":441,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserconfirmation(otp",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.create",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.findunique",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postgre.user.update",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.savedpost.create",{"_index":524,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["this.prisma.savedpost.delete",{"_index":530,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["this.prisma.savedpost.findfirst",{"_index":522,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["this.prisma.savedpost.findmany",{"_index":521,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["this.prisma.savedpost.findunique",{"_index":525,"title":{},"body":{"injectables/SavedPostService.html":{}}}],["this.prisma.user.findunique",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.saved.creatsaved(req.user.id",{"_index":500,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["this.saved.deletebookmarkbyid(req.user.id",{"_index":501,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["this.saved.getallsaved(req.user.id",{"_index":495,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["this.saved.getsavedbyid(req.user.id",{"_index":498,"title":{},"body":{"controllers/SavedPostController.html":{}}}],["this.userservice.edituser(user",{"_index":551,"title":{},"body":{"controllers/UserController.html":{}}}],["tho",{"_index":692,"title":{},"body":{"index.html":{}}}],["throw",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SavedPostService.html":{}}}],["time",{"_index":691,"title":{},"body":{"index.html":{}}}],["title",{"_index":328,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["token",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":401,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["try",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LogRequest.html":{}}}],["ttl",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["type",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLogin.html":{},"injectables/AuthService.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LogRequest.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/SavedPostController.html":{},"injectables/SavedPostService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["types/cache",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":633,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["unknown",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SavedPostService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":704,"title":{},"body":{"properties.html":{}}}],["url",{"_index":438,"title":{},"body":{"injectables/MailService.html":{},"injectables/PrismaService.html":{}}}],["use",{"_index":365,"title":{},"body":{"injectables/LogRequest.html":{}}}],["use(req",{"_index":366,"title":{},"body":{"injectables/LogRequest.html":{}}}],["used",{"_index":641,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":400,"title":{},"body":{"modules/MailModule.html":{}}}],["useguards",{"_index":486,"title":{},"body":{"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('jwt",{"_index":491,"title":{},"body":{"controllers/SavedPostController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":557,"title":{},"body":{"modules/UserModule.html":{}}}],["user.password",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["user.pw",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":546,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":531,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SavedPostService.html":{}}}],["userinfo",{"_index":534,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodule",{"_index":12,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userservice",{"_index":545,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["validate",{"_index":338,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/functions.html":{}}}],["validate(payload",{"_index":341,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":159,"title":{},"body":{"classes/AuthLogin.html":{},"classes/AuthSignup.html":{},"classes/CreateBookmarkDto.html":{},"classes/EditUser.html":{},"dependencies.html":{}}}],["values",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfied",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["verfifying",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifylogic",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifylogic(otp",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyotp",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotp(otp",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"properties.html":{}}}],["via",{"_index":661,"title":{},"body":{"index.html":{}}}],["void",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogRequest.html":{}}}],["welcome",{"_index":443,"title":{},"body":{"injectables/MailService.html":{}}}],["well",{"_index":629,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["work",{"_index":680,"title":{},"body":{"index.html":{}}}],["works",{"_index":665,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/SavedPostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nSavedPostModule\n\nSavedPostModule\n\nAppModule -->\n\nSavedPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Root Of the APP with request logging middleware implemented\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            SavedPostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:46\n                \n            \n\n\n            \n                \n                    Configuring the middleware for routes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  CacheModule,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { LogRequest } from './middleware';\nimport { PrismaService } from './prisma/prisma.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { MailModule } from './mail/mail.module';\nimport { UserModule } from './user/user.module';\nimport { SavedPostModule } from './saved-post/saved-post.module';\nimport * as ReddiStore from 'cache-manager-redis-store';\n\n/**\n * Root Of the APP with request logging middleware implemented\n */\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    CacheModule.register({\n      store: ReddiStore,\n      socket: {\n        host: 'localhost',\n        port: '6379',\n      },\n      isGlobal: true,\n      ttl: 1200,\n    }),\n    AuthModule,\n    PrismaModule,\n    MailModule,\n    UserModule,\n    SavedPostModule,\n  ],\n  providers: [PrismaService],\n})\nexport class AppModule implements NestModule {\n  /**\n   * Configuring the middleware for routes\n   */\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogRequest).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller to take all requests and send responses\n\nSignup\nSignin\nforgot Passwrod\nVerify Otp\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ForgotPwd\n                            \n                            \n                                Login\n                            \n                            \n                                Signup\n                            \n                            \n                                test\n                            \n                            \n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ForgotPwd\n                        \n                    \n                \n            \n            \n                \nForgotPwd(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forgotPwd')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(body: AuthLogin)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Signup\n                        \n                    \n                \n            \n            \n                \nSignup(body: AuthSignup)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/Signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        test\n                        \n                    \n                \n            \n            \n                \ntest(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/hehe')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n                    Sample Testing Route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \nverifyOTP(OTP: number, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/verifyOTP')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Body } from '@nestjs/common';\nimport { AuthLogin, AuthSignup } from 'src/Typings';\nimport { AuthService } from './auth.service';\n\n/**\n * Controller to take all requests and send responses\n *\n * - Signup\n * - Signin\n * - forgot Passwrod\n * - Verify Otp\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private AuthService: AuthService) {}\n\n  @Post('/Signup')\n  Signup(@Body() body: AuthSignup): Promise {\n    return this.AuthService.signupLogic(body);\n  }\n\n  @Post('/Login')\n  Login(@Body() body: AuthLogin): Promise {\n    return this.AuthService.loginLogic(body);\n  }\n\n  @Post('/forgotPwd')\n  ForgotPwd(@Body('email') email: string): Promise {\n    return this.AuthService.forgotLogic(email);\n  }\n\n  @Post('/verifyOTP')\n  verifyOTP(\n    @Body('OTP') OTP: number,\n    @Body('email') email: string,\n  ): Promise {\n    return this.AuthService.verifyLogic(OTP, email);\n  }\n\n  /**\n   * Sample Testing Route\n   */\n  @Post('/hehe')\n  test(@Body('email') email: string) {\n    return this.AuthService.getotp(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLogin.html":{"url":"classes/AuthLogin.html","title":"class - AuthLogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class AuthLogin {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  FirstName: string;\n}\n\nexport class EditUser {\n  @IsEmail()\n  @IsOptional()\n  email: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  FirstName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module is where we define all dependecies and relationships for nestjs application graph\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MailModule } from 'src/mail/mail.module';\nimport { JwtStrategy } from './JwtStrategy';\n\n/**\n * Module is where we define all dependecies and relationships for nestjs application graph\n */\n@Module({\n  /**\n   * things that have to be injected into controllers\n   */\n  providers: [AuthService, JwtStrategy],\n\n  // the controllers in this module\n  controllers: [AuthController],\n\n  // Modules required for this module\n  imports: [JwtModule.register({}), MailModule],\n\n  // the subset of providers that are provided by this module and should be available in other modules which import this module.\n  exports: [],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller For Auth related Jobs\n\nPrismaService for inserting and QUering UserData from Postgres\nConfig Servce for extracting Values [Jwt Secret] from .env\nJwtService for Signing Jwt with UserID\nCACHA_MANAGER for redis supprt to store OTP with ttl\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                forgotLogic\n                            \n                            \n                                    Async\n                                getotp\n                            \n                            \n                                    Async\n                                JwtSign\n                            \n                            \n                                    Async\n                                loginLogic\n                            \n                            \n                                    Async\n                                signupLogic\n                            \n                            \n                                    Async\n                                verifyLogic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService, jwt: JwtService, cachemanager: Cache, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cachemanager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotLogic(email)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n                    Forgot PassWord Logic Generating Random OTP Followed By\nStoring it in Redis and Emailing the User His Otp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getotp\n                        \n                    \n                \n            \n            \n                \n                    \n                    getotp(email)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        JwtSign\n                        \n                    \n                \n            \n            \n                \n                    \n                    JwtSign(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:134\n                \n            \n\n\n            \n                \n                    Signing JWT with SecretKey with 15m expiry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginLogic(body: AuthLogin)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:64\n                \n            \n\n\n            \n                \n                    Finding User , Verfifying Password with Argon2 and signing Jwt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthLogin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLogic(body: AuthSignup)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n                    Using argon2 a better version of SHA to Hash the passwords\nand Creating User Object all edge cases are handled by Prisma and Nestjs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthSignup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyLogic\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyLogic(OTP: any, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:107\n                \n            \n\n\n            \n                \n                    Verify Otp Logic Where OTP is retrieved From Redis and verfied\nreturns JWT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ForbiddenException,\n  Inject,\n  CACHE_MANAGER,\n} from '@nestjs/common';\nimport { AuthLogin, AuthSignup } from 'src/Typings';\nimport * as argon from 'argon2';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\nimport { MailService } from 'src/mail/mail.service';\n\n/**\n * ### Controller For Auth related Jobs\n * @constructor construstor is initiated with 4 Services\n *  - PrismaService for inserting and QUering UserData from `Postgres`\n *  - Config Servce for extracting Values [Jwt Secret] from `.env`\n *  - JwtService for Signing `Jwt` with UserID\n *  - CACHA_MANAGER for redis supprt to store OTP with `ttl`\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private postgre: PrismaService,\n    private config: ConfigService,\n    private jwt: JwtService,\n    @Inject(CACHE_MANAGER) private cachemanager: Cache,\n    private mailService: MailService,\n  ) {}\n\n  /**\n   * Using argon2 a better version of SHA to Hash the passwords\n   * and Creating User Object all edge cases are handled by Prisma and Nestjs\n   */\n  async signupLogic(body: AuthSignup): Promise {\n    const hash = await argon.hash(body.password);\n    try {\n      const user = await this.postgre.user.create({\n        data: {\n          email: body.email,\n          FirstName: body.FirstName,\n          pw: hash,\n        },\n      });\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } catch (error) {\n      console.log('here', error.code);\n\n      if (error.code == 'P2002') {\n        throw new ForbiddenException('Credentials Already Taken');\n      } else {\n        return error;\n      }\n    }\n  }\n\n  /**\n   * Finding User , Verfifying Password with Argon2 and signing Jwt\n   */\n  async loginLogic(body: AuthLogin): Promise {\n    const { email, password } = body;\n\n    const user = await this.postgre.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const pwMatches = await argon.verify(user.pw, password);\n    if (!pwMatches) throw new ForbiddenException('Credentials incorrect');\n\n    return {\n      Jwt: await this.JwtSign(user.id),\n    };\n  }\n\n  /**\n   * Forgot PassWord Logic Generating Random OTP Followed By\n   * Storing it in Redis and Emailing the User His Otp\n   */\n  async forgotLogic(email): Promise {\n    console.log(email);\n    const user = await this.postgre.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException('Credentials incorrect');\n    }\n    const OTP = Math.floor(Math.random() * 1000000);\n    await this.cachemanager.set(email, OTP);\n    await this.mailService.sendUserConfirmation(OTP, email);\n    return { message: 'done' };\n  }\n\n  /**\n   * Verify Otp Logic Where OTP is retrieved From Redis and verfied\n   * returns JWT\n   */\n  async verifyLogic(OTP: any, email: string): Promise {\n    const cacheotp = await this.cachemanager.get(email);\n    if (!cacheotp) {\n      throw new ForbiddenException('Session Expired or Not created');\n    }\n    if (OTP == cacheotp) {\n      const user = await this.postgre.user.findUnique({\n        where: {\n          email: email,\n        },\n      });\n      await this.cachemanager.del(email);\n      return {\n        Jwt: await this.JwtSign(user.id),\n      };\n    } else {\n      throw new ForbiddenException('Wrong Otp Enterred');\n    }\n  }\n\n  async getotp(email) {\n    return await this.cachemanager.get(email);\n  }\n\n  /**\n   * Signing JWT with SecretKey with `15m` expiry\n   */\n  async JwtSign(userId: number): Promise {\n    const payload = {\n      sub: userId,\n    };\n    const secret = this.config.get('JWT_SECRET');\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '1d',\n      secret: secret,\n    });\n    return token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthSignup.html":{"url":"classes/AuthSignup.html","title":"class - AuthSignup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthSignup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthLogin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                FirstName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Typings/auth.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        FirstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         AuthLogin\n\n                            \n                        \n                    \n                        \n                                Defined in         AuthLogin:10\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class AuthLogin {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  FirstName: string;\n}\n\nexport class EditUser {\n  @IsEmail()\n  @IsOptional()\n  email: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  FirstName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookmarkDto.html":{"url":"classes/CreateBookmarkDto.html","title":"class - CreateBookmarkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookmarkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/saved.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                link\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/saved.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/saved.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/saved.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateBookmarkDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  link: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUser.html":{"url":"classes/EditUser.html","title":"class - EditUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Typings/auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                FirstName\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FirstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Typings/auth.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class AuthLogin {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthSignup extends AuthLogin {\n  constructor() {\n    super();\n  }\n  @IsString()\n  @IsNotEmpty()\n  FirstName: string;\n}\n\nexport class EditUser {\n  @IsEmail()\n  @IsOptional()\n  email: string;\n  @IsString()\n  @IsOptional()\n  password: string;\n  @IsString()\n  @IsOptional()\n  FirstName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/JwtStrategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/JwtStrategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/JwtStrategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(config: ConfigService, private prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: number }) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n    delete user.pw;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogRequest.html":{"url":"injectables/LogRequest.html","title":"injectable - LogRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/requestLog.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a Middleware is designed to log the incomming requests for debugging and analysis\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/requestLog.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * This is a Middleware is designed to log the incomming requests for debugging and analysis\n */\n@Injectable()\nexport class LogRequest implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { baseUrl, headers, method, originalUrl } = req;\n    console.log(`\"${originalUrl}\" - METHOD ${method}`);\n\n    // with headers ${JSON.stringify(\n    //   headers,\n    // )}\n\n    res.on('close', () => {\n      // const respSent = res;\n      // console.log(res, 'lets try');\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Global Module to implement Email For OTP and other Purposes\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module, Global } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { join } from 'path';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Global Module to implement Email For OTP and other Purposes\n */\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          // host: config.get('MAIL_HOST'),\n          // service: 'gmail',\n          host: 'smtp-relay.sendinblue.com',\n          port: 587,\n          secure: false,\n          auth: {\n            user: config.get('MAIL_USER'),\n            pass: config.get('MAIL_PASSWORD'),\n          },\n        },\n        defaults: {\n          from: `\"No Reply\" `,\n        },\n        template: {\n          dir: join(__dirname, './templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                SendGrid Email SMTP server Configured and serving .hbs file as Email Templete By passing Arguments\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendUserConfirmation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendUserConfirmation\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendUserConfirmation(OTP: number, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    OTP\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\n// import { User } from '../../src/auth/entities/user.entity';\n\n/**\n * SendGrid Email SMTP server Configured and serving .hbs file as Email Templete By passing Arguments\n */\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendUserConfirmation(OTP: number, email: string) {\n    // const url = `example.com/auth/confirm?token=${token}`;\n    console.log();\n    await this.mailerService.sendMail({\n      to: email,\n      subject: 'Welcome to Nice App! Confirm your Email',\n      template: './confirmation',\n      context: {\n        OTP: OTP,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module for initiating Prisma-Postgres Connection\nand exporting Prisma Service globally for it to get injected in all modules\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n/**\n * Module for initiating Prisma-Postgres Connection\n * and exporting Prisma Service globally for it to get injected in all modules\n */\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementing PrismaClient\n\n            \n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n/**\n * Implementing PrismaClient\n */\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SavedPostController.html":{"url":"controllers/SavedPostController.html","title":"controller - SavedPostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SavedPostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/saved-post/saved-post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                saved-post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBookmark\n                            \n                            \n                                deleteBookmarkById\n                            \n                            \n                                getBookmarkById\n                            \n                            \n                                getBookmarks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBookmark\n                        \n                    \n                \n            \n            \n                \ncreateBookmark(req: any, dto: CreateBookmarkDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/saved-post/saved-post.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateBookmarkDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteBookmarkById\n                        \n                    \n                \n            \n            \n                \ndeleteBookmarkById(req: any, savedid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/saved-post/saved-post.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    savedid\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBookmarkById\n                        \n                    \n                \n            \n            \n                \ngetBookmarkById(req: any, savedid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/saved-post/saved-post.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    savedid\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBookmarks\n                        \n                    \n                \n            \n            \n                \ngetBookmarks(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/saved-post/saved-post.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { CreateBookmarkDto } from 'src/Typings/saved';\nimport { SavedPostService } from './saved-post.service';\n\n@UseGuards(AuthGuard('jwt'))\n@Controller('saved-post')\nexport class SavedPostController {\n  constructor(private Saved: SavedPostService) {}\n\n  @Get()\n  getBookmarks(@Req() req: any) {\n    console.log(req.user);\n\n    return this.Saved.getAllSaved(req.user.id);\n  }\n\n  @Get(':id')\n  getBookmarkById(@Req() req: any, @Param('id', ParseIntPipe) savedid: number) {\n    return this.Saved.getSavedByID(req.user.id, savedid);\n  }\n\n  @Post()\n  createBookmark(@Req() req: any, @Body() dto: CreateBookmarkDto) {\n    return this.Saved.creatSaved(req.user.id, dto);\n  }\n\n  @Delete(':id')\n  deleteBookmarkById(\n    @Req() req: any,\n    @Param('id', ParseIntPipe) savedid: number,\n  ) {\n    return this.Saved.deleteBookmarkById(req.user.id, savedid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SavedPostModule.html":{"url":"modules/SavedPostModule.html","title":"module - SavedPostModule","body":"\n                   \n\n\n\n\n    Modules\n    SavedPostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SavedPostModule\n\n\n\ncluster_SavedPostModule_providers\n\n\n\n\nSavedPostService\n\nSavedPostService\n\n\n\nSavedPostModule\n\nSavedPostModule\n\nSavedPostModule -->\n\nSavedPostService->SavedPostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/saved-post/saved-post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SavedPostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SavedPostController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SavedPostService } from './saved-post.service';\nimport { SavedPostController } from './saved-post.controller';\n\n@Module({\n  providers: [SavedPostService],\n  controllers: [SavedPostController]\n})\nexport class SavedPostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SavedPostService.html":{"url":"injectables/SavedPostService.html","title":"injectable - SavedPostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SavedPostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/saved-post/saved-post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                creatSaved\n                            \n                            \n                                    Async\n                                deleteBookmarkById\n                            \n                            \n                                getAllSaved\n                            \n                            \n                                getSavedByID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/saved-post/saved-post.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        creatSaved\n                        \n                    \n                \n            \n            \n                \n                    \n                    creatSaved(userId: number, dto: CreateBookmarkDto)\n                \n            \n\n\n            \n                \n                    Defined in src/saved-post/saved-post.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateBookmarkDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteBookmarkById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBookmarkById(userId: number, savedid: number)\n                \n            \n\n\n            \n                \n                    Defined in src/saved-post/saved-post.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    savedid\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSaved\n                        \n                    \n                \n            \n            \n                \ngetAllSaved(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/saved-post/saved-post.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSavedByID\n                        \n                    \n                \n            \n            \n                \ngetSavedByID(userId: number, bookmarkId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/saved-post/saved-post.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookmarkId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { CreateBookmarkDto } from 'src/Typings/saved';\n\n@Injectable()\nexport class SavedPostService {\n  constructor(private prisma: PrismaService) {}\n\n  getAllSaved(userId: number) {\n    return this.prisma.savedPost.findMany({\n      where: {\n        Userid: userId,\n      },\n    });\n  }\n\n  getSavedByID(userId: number, bookmarkId: number) {\n    return this.prisma.savedPost.findFirst({\n      where: {\n        id: bookmarkId,\n        Userid: userId,\n      },\n    });\n  }\n\n  async creatSaved(userId: number, dto: CreateBookmarkDto) {\n    const bookmark = await this.prisma.savedPost.create({\n      data: {\n        Userid: userId,\n        ...dto,\n      },\n    });\n\n    return bookmark;\n  }\n\n  async deleteBookmarkById(userId: number, savedid: number) {\n    const bookmark = await this.prisma.savedPost.findUnique({\n      where: {\n        id: savedid,\n      },\n    });\n    if (!bookmark || bookmark.Userid !== userId)\n      throw new ForbiddenException('Access to resources denied');\n\n    await this.prisma.savedPost.delete({\n      where: {\n        id: savedid,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controller for User routs\n\nget UserInfo and Saved Posts\nChange Password\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                EditMyData\n                            \n                            \n                                MyData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        EditMyData\n                        \n                    \n                \n            \n            \n                \nEditMyData(User: EditUser, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('edit')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MyData\n                        \n                    \n                \n            \n            \n                \nMyData(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { AuthSignup, EditUser } from 'src/Typings';\n\n/**\n * Controller for User routs\n * - get UserInfo and Saved Posts\n * - Change Password\n */\n@UseGuards(AuthGuard('jwt'))\n@Controller('user')\nexport class UserController {\n  constructor(private userService: UserService) {}\n  @Get('me')\n  MyData(@Req() req: Request) {\n    return req.user;\n  }\n\n  @Post('edit')\n  EditMyData(@Body() User: EditUser, @Req() req: Request) {\n    return this.userService.editUser(User, req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Module to Setup User Logic to get their Saved Posts etc or change Password\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\n/**\n * Module to Setup User Logic to get their Saved Posts etc or change Password\n */\n@Module({\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postgre: PrismaService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postgre\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(User: EditUser, dbuser: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    User\n                                    \n                                                EditUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbuser\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { EditUser } from 'src/Typings';\nimport * as argon from 'argon2';\n@Injectable()\nexport class UserService {\n  constructor(private postgre: PrismaService, private config: ConfigService) {}\n\n  async editUser(User: EditUser, dbuser: any) {\n    if (User.password) {\n      const hash = await argon.hash(User.password);\n      delete User.password;\n      const user = await this.postgre.user.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n          pw: hash,\n        },\n      });\n      delete user.pw;\n      return user;\n    } else {\n      const user = await this.postgre.user.update({\n        where: {\n          id: dbuser.id,\n        },\n        data: {\n          ...User,\n        },\n      });\n      delete user.pw;\n      return user;\n    }\n  }\n  //   GetInfo\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthLogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            AuthSignup\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/Typings/auth.ts\n            \n            class\n            EditUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/Typings/saved.ts\n            \n            class\n            CreateBookmarkDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/JwtStrategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/middleware/requestLog.ts\n            \n            injectable\n            LogRequest\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/saved-post/saved-post.controller.ts\n            \n            controller\n            SavedPostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/saved-post/saved-post.service.ts\n            \n            injectable\n            SavedPostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.3.1\n        \n            @types/cache-manager-redis-store : ^2.0.1\n        \n            @types/nodemailer : ^6.4.6\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            argon2 : ^0.29.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            nodemailer : ^6.7.8\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            prisma : ^4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Init of Out APP\n\nwell i am using global piplines to validate icomming request Body with the help of typescript\n\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nApp where i learnt Nestjs features , architechture and authentication.\nStack used\n\nPrisma - for Postgres\nDocker - to host and run postgres\nnestjs - backend framework\npython - api testing\nTypescript\nPassportJs - Auth and jwt management\n\nDocs how i used prisma and docker in first place\n\nI used Compose Docs for generating the documentation ; they are static html/js files so i was thinking to make a site and serve it via express where i will serve all the documentations of my Apps\nPrisma well i used to maintain all my db works and i guess i am in love with it 🥰 , Prisma ORM is flexible for me to setup relations easily and manage creating via npx prisma migrate dev and moniter my database from npx prisma studio\nPostgres was awesome to work with rn as i was currently using Prisma it doesnt make sense for me as it is Mysql or Postgres but maybe i will get to know with features like geotaging\nDocker i am using to run my postgres instance on port 5434 this is my first time tho\nRunning Redis instance on docker for OTP support\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SavedPostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_SavedPostModule\n\n\n\ncluster_SavedPostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nSavedPostModule\n\nSavedPostModule\n\nAppModule -->\n\nSavedPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nSavedPostService\n\nSavedPostService\n\nSavedPostModule -->\n\nSavedPostService->SavedPostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
